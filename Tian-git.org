#+OPTIONS: H:2 toc:t todo:nil 
#+LATEX_CLASS: beamer
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+BEAMER_THEME: Singapore
#+BEAMER_COLOR_THEME:
#+BEAMER_FONT_THEME:
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+BEAMER_HEADER: \usemintedstyle{emacs}
#+STARTUP: beamer
#+TITLE: A Very Very Short Introduction to Git
#+AUTHOR: Tian Tian 
#+EMAIL: https://github.com/lovaulonze

* What & Why Git?

** Version-controlling: a comparison

#+LATEX: \footnotesize
|---------------+---------------+--------------------+---------------------|
| Methods       | Data Location | Pros               | Cons                |
|---------------+---------------+--------------------+---------------------|
| Manual Dating | L             | SO EASY            | What about merging? |
| Dropbox       | L/R           | Easy synchronizing | Only 1-way fallback |
| SVN           | L/R           | True VCS           | Centralized         |
| Git           | L/R           | *Decentralized*    | Merging is verbose  |
|---------------+---------------+--------------------+---------------------|

** Basic ideas of git

- Cache snapshots of file are stored, not the difference
- Local operations, mirroring remote source
  - A central server is actually *not* necessary
- Can revert to any state



** States in git

- Not staged: changes are not recorded
- Staged (not committed): git knows your changes, but you haven't decided if you need to commit.
  - Normally it's easier to just stage and commit your changes
  - May be useful if you are doing a long fix
  - Unstage your changes does not revert the file.
- Committed: the changes are permanently recorded. You can either push your changes or continue working.
- *Anything you committed is safe!* (but the process can mess up)




** Helpful utilities for git 

- Command line (*of course*)
- The github client (good for visual branching)
- =Magit-mode= for =emacs=
- =vim-fugitive= for =vim=




* Git Commands

** Initialize a clean repository
#+LATEX: \footnotesize
#+NAME: git-clean-init
  #+BEGIN_SRC shell :exports both :results replace output :noeval
    #Initialize a clean git repo
    git init
    git status
  #+END_SRC

*Results*:

#+LATEX: \tiny
#+RESULTS: git-clean-init
  #+begin_example
  Reinitialized existing Git repository in
  /Users/tiantian/polybox/Studies_ETH/Computation-Seminar/.git/
  On branch master

  Initial commit

  Untracked files:
    (use "git add <file>..." to include in what will be committed)

          #Tian-git.org#
          .#Tian-git.org
          .DS_Store
          Tian-git.dvi
          Tian-git.org
          Tian-git.org~
          Tian-git.pdf
          Tian-git.tex
          Tian-git.tex~
          _minted-Tian-git/

  nothing added to commit but untracked files present (use "git add" to track)
#+end_example

** Clone from an existing *remote* repository
#+LATEX: \footnotesize
#+NAME: git-clone
#+BEGIN_SRC shell :exports both :results replace output :noeval
  # Clone from a remote repo to local dir
  git clone https://github.com/lovaulonze/.matplotlib.git some
  ls -al some
#+END_SRC

*Results*
#+LaTeX: \tiny
#+RESULTS: git-clone
: total 56
: drwxr-xr-x   6 tiantian  staff    204  1  6 10:59 .
: drwxr-xr-x  14 tiantian  staff    476  1  6 10:59 ..
: drwxr-xr-x  12 tiantian  staff    408  1  6 10:59 .git
: -rw-r--r--   1 tiantian  staff     61  1  6 10:59 .gitignore
: -rw-r--r--   1 tiantian  staff  24528  1  6 10:59 matplotlibrc
: drwxr-xr-x   4 tiantian  staff    136  1  6 10:59 stylelib




  
 

** Remember to use the =.gitignore= file
#+LaTeX: \footnotesize
#+NAME: no-gitignore
#+BEGIN_SRC shell :exports both :results verbose replace output :noeval 
  # Git status w/o .gitignore rules
  git status
#+END_SRC

*Results*

#+LaTeX: \tiny
#+RESULTS: no-gitignore
#+begin_example
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    .#Tian-git.org
    .DS_Store
    Tian-git.dvi
    Tian-git.org
    Tian-git.org~
    Tian-git.pdf
    Tian-git.tex
    Tian-git.tex~
    _minted-Tian-git/
    some/

nothing added to commit but untracked files present (use "git add" to track)
#+end_example


** =.gitignore= (II)

#+LaTeX: \footnotesize
#+BEGIN_SRC shell :exports both :results replace output :noeval
  # Use .gitignore rules
  cat .gitignore
  echo ""
  echo ""
  git status 
#+END_SRC

*Results*

#+LaTeX: \tiny
#+RESULTS:
#+begin_example
*#*
*~
*.tex
_minted*
some/
*.dvi

On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    .DS_Store
    .gitignore
    Tian-git.org
    Tian-git.pdf

nothing added to commit but untracked files present (use "git add" to track)
#+end_example


** Stage the untracked files:
#+LaTeX: \footnotesize
#+BEGIN_SRC shell :exports both :results replace output :noeval
  # Add some file to the staged area
  # But we leave out some
  git add Tian-* .gitignore
  git status
#+END_SRC

*Results*

#+LaTeX: \tiny
#+RESULTS:
#+begin_example
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

    new file:   .gitignore
    new file:   Tian-git.org
    new file:   Tian-git.pdf

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    .DS_Store

#+end_example


** Finally the commit
#+LaTeX: \footnotesize
#+NAME: git-commit
#+BEGIN_SRC shell :exports both  :results replace output :noeval
  # Commit the stated files
  git commit -m "Commit. Presentation to the commit"
  git status
#+END_SRC

*Results*

#+LaTeX: \tiny
#+RESULTS: git-commit
#+begin_example
[master (root-commit) 45f73d7] Commit. Presentation to the commit
 3 files changed, 203 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 Tian-git.org
 create mode 100644 Tian-git.pdf
On branch master

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    .DS_Store

no changes added to commit (use "git add" and/or "git commit -a")
#+end_example


** Now use a remote for pushing
#+LaTeX: \footnotesize
#+NAME: git-push
#+BEGIN_SRC shell :exports both :results replace output :noeval
  # Must add a remote for pushing!
  # origin is the default branch
  git remote add origin https://github.com/lovaulonze/git-slides.git
  # Push the changes to the master upstream
  git push -u origin master
  git status
#+END_SRC

*Results*

#+LaTeX: \tiny
#+RESULTS: git-push
#+begin_example
Branch master set up to track remote branch master from origin.
On branch master
Your branch is up-to-date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    .DS_Store

no changes added to commit (use "git add" and/or "git commit -a")
#+end_example


** The difference between the remote and local

#+LaTeX: \footnotesize
#+NAME: remote-local
#+BEGIN_SRC shell :exports both :results replace output :noeval
  # Now lets do some commit locally
  git add Tian-git.org Tian-git.pdf
  git commit -m "Now proceed to the remote part"
  git status
#+END_SRC

*Results*

#+RESULTS: remote-local
: [master 262e532] Now proceed to the remote part
:  1 file changed, 6 insertions(+), 14 deletions(-)
: On branch master
: Your branch is ahead of 'origin/master' by 1 commit.
:   (use "git push" to publish your local commits)
: nothing to commit, working tree clean



** Check the log of the git
#+LaTeX: \footnotesize
#+NAME: git-log
#+BEGIN_SRC shell :exports both :results replace output :noeval 
  # Some formatting using git log
  # But I prefer to use a GUI or editor plugin
  git log --pretty=format:"%h %ad | %s%d [%an]" --date=short
#+END_SRC

#+LaTeX: \tiny
#+RESULTS: git-log
: 262e532 2017-01-06 | Now proceed to the remote part (HEAD -> master) [Tian Tian]
: af9e6be 2017-01-06 | Add .DS_Store to ignore (origin/master) [Tian Tian]
: 0bc7411 2017-01-06 | Now proceed to the remote part [Tian Tian]
: 45f73d7 2017-01-06 | Commit. Presentation to the commit [Tian Tian]


** Undoing

*** =--amend= option: add/something immediately after committing.
#+LaTeX: \footnotesize
  #+BEGIN_SRC shell :noeval
git commit --amend
#+END_SRC

*** Unstaging
#+LaTeX: \footnotesize
  #+BEGIN_SRC shell :exports both :results replace output :noeval
  #Add files to stage
  git add Tian-*
  git status -s
  #I wanna remove the pdf from staging
  git reset HEAD Tian-git.pdf
  git status -s
  #+END_SRC

  #+LaTeX: \tiny
  #+RESULTS:
  : M  Tian-git.org
  : M  Tian-git.pdf
  : Unstaged changes after reset:
  : M    Tian-git.pdf
  : M  Tian-git.org
  :  M Tian-git.pdf


** What if you don't like your current changes?
#+LaTeX: \footnotesize
- =checkout= on file
  #+BEGIN_SRC shell
    # The checkout will revert the changes
    # in this file to the last commit
    git checkout -- $FILE
  #+END_SRC
  - *But* the change is never saved!
- =checkout= on version
  #+BEGIN_SRC shell
    # The checkout with a hash will
    # checkout on the specific version
    git checkout 45f73d7
  #+END_SRC
- If local changes have been made after checkout to another version and you don't want to commit them: =stash=
  #+BEGIN_SRC shell
  # Stash local changes if you encounter
  # errors checking out to another version
  git stash save
  # Or just ignore the changes
  git stash drop
#+END_SRC


** TAG: easier way to work with versions
#+LaTeX: \footnotesize
#+BEGIN_SRC shell
  # Add a tag to the HEAD commit
  git tag 0.1.0
  # You can use relative versions to checkout
  # ^ is the parent commit
  git checkout 0.1.0^
  # ~[num] is the version offset
  git checkout 0.1.0~2
#+End_SRC


** Branching
When is a branching needed?
- Adding experimental features
- Restructuring code
- Your boss changes your \LaTeX files

#+LaTeX: \footnotestyle
#+BEGIN_SRC shell :exports both :results silent
  # We are on the master branch!
  git checkout alter-ego
#+END_SRC


** Merge: =alter-ego= --> =master=

#+BEGIN_SRC shell 
  # From the alter-ego branch, checkout master
  git checkout master
  # From the branch, merge with master
  git merge alter-ego
#+END_SRC

- *CAUTION* editing the same region in both branches will cause unsuccessful merge!
- =git reset --merge= if you find the merge not necessary
- Manually reset the conflicts!
- Binary files cannot be merged.



** Pull commits from the remote

#+BEGIN_SRC shell :noeval
  # Pull from a remote upstream, if already set
  git pull $remote $branch
#+END_SRC

Some advice on a save push/pull strategy with online repository:

- Be patient when conflicts happen
- Be cooperative with others to avoid conflict
- If necessary use additional branch only for pull




** Some other techniques of git

- Remote collaboration
- Distributed / multiple remote repos
- Privilege management
- ...
 


** Some Tricks
- Make commits to solve a problem / add a function
- Avoid commit on multiple problems
- Use branch and merge to test experimental functions
- Be patient and brave: you won't lose anything!


** Useful Resources

- [[https://git-scm.com/doc]]
- [[https://gitlab.ethz.ch]]
- [[https://github.com]]


